package com.sandro.customer;

import com.sandro.exception.DuplicateResourceException;
import com.sandro.exception.RequestValidationException;
import com.sandro.exception.ResourceNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CustomerServiceTest {

    @Mock
    private CustomerDao customerDao;
    private CustomerService underTest;

    @BeforeEach
    void setUp() {
        //autoCloseable = MockitoAnnotations.openMocks(this); @ExtendWith instead
        underTest = new CustomerService(customerDao);
    }


    @Test
    void getAllCustomers() {
        // When
        underTest.getAllCustomers();

        // Then
        verify(customerDao).selectAllCustomers();
    }

    @Test
    void canGetCustomer() {
        // Given
        int id = 1;
        Customer customer = new Customer(id, "Sandro", "sandro@gmail.com", 24, Gender.MALE);
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.of(customer)); //select by given id then return created customer

        // When
        Customer actualCustomer = underTest.getCustomer(id);

        // Then
        assertThat(actualCustomer).isEqualTo(customer);
    }

    @Test
    void willThrowWhenGetCustomerReturnsEmptyOptional() {
        // Given
        int id = 1;
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.empty()); //return empty optional

        // When
        // Then (Make sure exception is thrown)
        assertThatThrownBy(() -> underTest.getCustomer(id))
                .isInstanceOf(ResourceNotFoundException.class)
                .hasMessage("customer with id [%s] not found".formatted(id));
    }

    @Test
    void addCustomer() {
        // Given
        String email = "sandro@gmail.com";

        when(customerDao.existsPersonWithEmail(email)).thenReturn(false); // avail email should return false

        CustomerRegistrationRequest request = new CustomerRegistrationRequest("bob", email, 18, Gender.MALE);
        // When
        underTest.addCustomer(request);

        // Then
        ArgumentCaptor<Customer> customerArgumentCaptor = ArgumentCaptor.forClass(Customer.class);

        verify(customerDao).insertCustomer(customerArgumentCaptor.capture());

        Customer capturedCustomer = customerArgumentCaptor.getValue(); //extract value for assertion

        assertThat(capturedCustomer.getId()).isNull(); //null b/c id generated by db
        assertThat(capturedCustomer.getName()).isEqualTo(request.name());
        assertThat(capturedCustomer.getEmail()).isEqualTo(request.email());
        assertThat(capturedCustomer.getAge()).isEqualTo(request.age());

    }

    @Test
    void willThrowWhenEmailExistsWhileAddingCustomer() {
        // Given
        String email = "sandro@gmail.com";

        when(customerDao.existsPersonWithEmail(email)).thenReturn(true);

        CustomerRegistrationRequest request = new CustomerRegistrationRequest("bob", email, 18, Gender.MALE);
        // When
        assertThatThrownBy(() -> underTest.addCustomer(request))
                .isInstanceOf(DuplicateResourceException.class)
                .hasMessage("Email already taken!");

        // Then
        verify(customerDao, never()).insertCustomer(any()); //assure customer is ! added

    }

    @Test
    void deleteCustomerById() {
        // Given
        int id = 1;

        when(customerDao.existsPersonWithId(id)).thenReturn(true);

        // When
        underTest.deleteCustomerById(id);


        // Then
        verify(customerDao).deleteCustomerById(id);

    }

    @Test
    void willThrowWhenDeleteCustomerByIdNotExists() {
        // Given
        int id = 1;

        when(customerDao.existsPersonWithId(id)).thenReturn(false);

        // When
        assertThatThrownBy(() -> underTest.deleteCustomerById(id))
                .isInstanceOf(ResourceNotFoundException.class)
                .hasMessage("customer with id [%s] not found".formatted(id));


        // Then
        verify(customerDao, never()).deleteCustomerById(id);

    }

    @Test
    void canUpdateAllCustomersProperties() {
        // Given
        int id = 1;
        Customer customer = new Customer("sandro", "sandro@gmail.com", 24, Gender.MALE);
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.of(customer));

        String newEmail = "update@gmail.com";
        CustomerUpdateRequest updatedCustomer = new CustomerUpdateRequest("update", newEmail, 30);

        when(customerDao.existsPersonWithEmail(newEmail)).thenReturn(false);

        // When
        underTest.updateCustomer(id, updatedCustomer);

        // Then
        ArgumentCaptor<Customer> customerArgumentCaptor = ArgumentCaptor.forClass(Customer.class);

        verify(customerDao).updateCustomer(customerArgumentCaptor.capture());
        Customer capturedCustomer = customerArgumentCaptor.getValue();

        assertThat(capturedCustomer.getAge()).isEqualTo(updatedCustomer.age());
        assertThat(capturedCustomer.getName()).isEqualTo(updatedCustomer.name());
        assertThat(capturedCustomer.getEmail()).isEqualTo(updatedCustomer.email());

    }

    @Test
    void canUpdateOnlyCustomerName() {
        // Given
        int id = 1;
        Customer customer = new Customer("sandro", "sandro@gmail.com", 24, Gender.MALE);
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.of(customer));

        String newEmail = "update@gmail.com";
        CustomerUpdateRequest updatedCustomer = new CustomerUpdateRequest("update", null, null);

        // When
        underTest.updateCustomer(id, updatedCustomer);

        // Then
        ArgumentCaptor<Customer> customerArgumentCaptor = ArgumentCaptor.forClass(Customer.class);

        verify(customerDao).updateCustomer(customerArgumentCaptor.capture());
        Customer capturedCustomer = customerArgumentCaptor.getValue();

        assertThat(capturedCustomer.getName()).isEqualTo(updatedCustomer.name());
        assertThat(capturedCustomer.getAge()).isEqualTo(customer.getAge());
        assertThat(capturedCustomer.getEmail()).isEqualTo(customer.getEmail());

    }

    @Test
    void canUpdateOnlyCustomerEmail() {
        // Given
        int id = 1;
        Customer customer = new Customer("sandro", "sandro@gmail.com", 24, Gender.MALE);
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.of(customer));

        String newEmail = "update@gmail.com";
        CustomerUpdateRequest updatedCustomer = new CustomerUpdateRequest(null, newEmail, null);

        when(customerDao.existsPersonWithEmail(newEmail)).thenReturn(false);

        // When
        underTest.updateCustomer(id, updatedCustomer);

        // Then
        ArgumentCaptor<Customer> customerArgumentCaptor = ArgumentCaptor.forClass(Customer.class);

        verify(customerDao).updateCustomer(customerArgumentCaptor.capture());
        Customer capturedCustomer = customerArgumentCaptor.getValue();

        assertThat(capturedCustomer.getName()).isEqualTo(customer.getName());
        assertThat(capturedCustomer.getAge()).isEqualTo(customer.getAge());
        assertThat(capturedCustomer.getEmail()).isEqualTo(updatedCustomer.email());

    }

    @Test
    void canUpdateOnlyCustomerAge() {
        // Given
        int id = 1;
        Customer customer = new Customer("sandro", "sandro@gmail.com", 24, Gender.MALE);
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.of(customer));


        CustomerUpdateRequest updatedCustomer = new CustomerUpdateRequest(null, null, 23);


        // When
        underTest.updateCustomer(id, updatedCustomer);

        // Then
        ArgumentCaptor<Customer> customerArgumentCaptor = ArgumentCaptor.forClass(Customer.class);

        verify(customerDao).updateCustomer(customerArgumentCaptor.capture());
        Customer capturedCustomer = customerArgumentCaptor.getValue();

        assertThat(capturedCustomer.getName()).isEqualTo(customer.getName());
        assertThat(capturedCustomer.getAge()).isEqualTo(updatedCustomer.age());
        assertThat(capturedCustomer.getEmail()).isEqualTo(customer.getEmail());

    }

    @Test
    void willThrowWhenTryingToUpdateCustomerEmailAlreadyTaken() {
        // Given
        int id = 1;
        Customer customer = new Customer("sandro", "sandro@gmail.com", 24, Gender.MALE);
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.of(customer));

        String newEmail = "update@gmail.com";
        CustomerUpdateRequest updatedCustomer = new CustomerUpdateRequest(null, newEmail, null);

        when(customerDao.existsPersonWithEmail(newEmail)).thenReturn(true);

        // When
        assertThatThrownBy(() -> underTest.updateCustomer(id, updatedCustomer))
                .isInstanceOf(DuplicateResourceException.class)
                .hasMessage("Email already taken!");


        // Then

        verify(customerDao, never()).updateCustomer(any());


    }

    @Test
    void willThrowWhenCustomerUpdateHasNoChanges() {
        // Given
        int id = 1;
        Customer customer = new Customer("sandro", "sandro@gmail.com", 24, Gender.MALE);
        when(customerDao.selectCustomerById(id)).thenReturn(Optional.of(customer));

        CustomerUpdateRequest updatedCustomer = new CustomerUpdateRequest(customer.getName(), customer.getEmail(), customer.getAge());

        // When
        assertThatThrownBy(() -> underTest.updateCustomer(id, updatedCustomer))
                .isInstanceOf(RequestValidationException.class)
                .hasMessage("No data changes found");

        // Then

        verify(customerDao, never()).updateCustomer(any());


    }
}